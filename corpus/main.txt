========================================================================
empty function
========================================================================

func main() {}

------------------------------------------------------------------------

(source_file
  (function_definition
    (func_header
      (identifier)
      (parameters))
    (block)))


========================================================================
simple small string
========================================================================

func main() {
    "Hello World"
}

------------------------------------------------------------------------

(source_file
  (function_definition
    (func_header
      (identifier)
      (parameters))
    (block
      (literal
        (string_literal
          (interpolated_string_text))))))

========================================================================
small string with hex escape
========================================================================

func main() {
    "sprog\u001bwoggle" + "sprog\nbwoggle"
}

------------------------------------------------------------------------

(source_file
  (function_definition
    (func_header
      (identifier)
      (parameters))
    (block
      (binary_expr
        (literal
          (string_literal
            (interpolated_string_text)
            (interpolated_string_text
              (escape_sequence))
            (interpolated_string_text)))
        (literal
          (string_literal
            (interpolated_string_text)
            (interpolated_string_text
              (escape_sequence))
            (interpolated_string_text)))))))

========================================================================
string interpolation
========================================================================

exported func main() str {
    return """bl"{ns(4)}rg""";
}

------------------------------------------------------------------------

(source_file
  (function_definition
    (func_header
      (identifier)
        (parameters)
        (type
          (type_identifier)))
      (block
        (expr_statement
          (return_expr
            (literal
              (string_literal
                (interpolated_raw_string_text)
                (interpolated_raw_string_text)
                (interpolation
                  (call_expr
                    (identifier)
                    (literal
                      (int_lit))))
                (interpolated_raw_string_text))))))))

========================================================================
pure function
========================================================================

pure func main() str {
    return "hi";
}

------------------------------------------------------------------------

(source_file
  (function_definition
    (func_header
      (identifier)
      (parameters)
      (type
        (type_identifier)))
    (block
      (expr_statement
        (return_expr
          (literal
            (string_literal
              (interpolated_string_text))))))))

========================================================================
function with read only region
========================================================================

exported func region<a' ro>() {
  hi = "fun!";
}

------------------------------------------------------------------------

(source_file
  (function_definition
    (func_header
      (identifier)
      (generic_parameters
        (generic_parameter
          (region_parameter
              (identifier))))
      (parameters))
    (block
      (variable_definition
        (pattern
          (identifier))
        (literal
          (string_literal
            (interpolated_string_text)))))))

========================================================================
function with region complex type
========================================================================

exported func region<a' ro>(lovely_things &a'List<a'str>) {
  "Leet!"
}

------------------------------------------------------------------------

(source_file
  (function_definition
    (func_header
      (identifier)
      (generic_parameters
        (generic_parameter
            (region_parameter
              (identifier))))
      (parameters
        (parameter
          (identifier)
          (type
            (reference_type
              (type
                (region_specifier
                  (identifier))
                (generic_type
                  (type_identifier)
                  (generic_parameters
                    (generic_parameter
                      (type
                        (region_specifier
                          (identifier))
                        (type_identifier)))))))))))
    (block
      (literal
        (string_literal
          (interpolated_string_text))))))

========================================================================
operator overload with regions
========================================================================

func ==<A', B'>(a A'str, b B'str) bool {
  streq(a, 0, a.len(), b, 0, b.len())
}

------------------------------------------------------------------------

    (source_file
      (function_definition
        (func_header
          (generic_parameters
            (generic_parameter
              (region_parameter
                (identifier)))
            (generic_parameter
              (region_parameter
                (identifier))))
          (parameters
            (parameter
              (identifier)
              (type
                (region_specifier
                  (identifier))
                (type_identifier)))
            (parameter
              (identifier)
              (type
                (region_specifier
                  (identifier))
                (type_identifier))))
          (type
            (type_identifier)))
        (block
          (call_expr
            (identifier)
            (identifier)
            (literal
              (int_lit))
            (call_expr
              (field_expr
                (identifier)
                (field_identifier)))
            (identifier)
            (literal
              (int_lit))
            (call_expr
              (field_expr
                (identifier)
                (field_identifier)))))))

========================================================================
use 'sneaky' builtin functions
========================================================================

func secret() int {
  mask = (1 lshift 10) xor (64 rshift 4);
  return mask;
}

------------------------------------------------------------------------


(source_file
  (function_definition
    (func_header
      (identifier)
      (parameters)
      (type
        (type_identifier)))
    (block
      (variable_definition
        (pattern
          (identifier))
        (binary_expr
          (parenthesized_expr
            (binary_expr
              (literal
                (int_lit))
              (literal
                (int_lit))))
          (parenthesized_expr
            (binary_expr
              (literal
                (int_lit))
              (literal
                (int_lit))))))
      (expr_statement
        (return_expr
          (identifier))))))

========================================================================
destructuring
========================================================================

func a() {
  [abc] = Destructered();
}

------------------------------------------------------------------------

(source_file
      (function_definition
        (func_header
          (identifier)
          (parameters))
        (block
          (variable_definition
            (pattern
              (destruct
                (pattern
                  (identifier))))
            (call_expr
              (identifier))))))

========================================================================
destructuring with set
========================================================================

func a() {
  [abc, set def] = Destructered();
}

------------------------------------------------------------------------

(source_file
      (function_definition
        (func_header
          (identifier)
          (parameters))
        (block
          (variable_definition
            (pattern
              (destruct
                (pattern
                  (identifier))
                (pattern
                  (identifier))))
            (call_expr
              (identifier))))))

========================================================================
destructure array (drop)
========================================================================

func a() {
  [] = Destructered();
}

------------------------------------------------------------------------

(source_file
      (function_definition
        (func_header
          (identifier)
          (parameters))
        (block
          (variable_definition
            (pattern
              (destruct))
            (call_expr
              (identifier))))))

========================================================================
variable assignment with keyword overlap
========================================================================

func a() {
  rows = getRows();
  dublin = getCapital("Ireland");

  rand_seed = 1337;
  rand = XS32Rand(-1i64 * rand_seed);
}

------------------------------------------------------------------------

(source_file
  (function_definition
    (func_header
      (identifier)
      (parameters))
    (block
      (variable_definition
        (pattern
          (identifier))
        (call_expr
          (identifier)))
      (variable_definition
        (pattern
          (identifier))
        (call_expr
          (identifier)
          (literal
            (string_literal
              (interpolated_string_text)))))
      (variable_definition
        (pattern
          (identifier))
        (literal
          (int_lit)))
      (variable_definition
        (pattern
          (identifier))
        (call_expr
          (identifier)
          (binary_expr
            (literal
              (int_lit
                (int_type)))
            (identifier)))))))

========================================================================
variable definition with array access
========================================================================

func cursed(i int) Goblin {
  goblin = goblins[i];
}

------------------------------------------------------------------------

(source_file
  (function_definition
    (func_header
      (identifier)
      (parameters
        (parameter
          (identifier)
          (type
            (type_identifier))))
      (type
        (type_identifier)))
    (block
      (variable_definition
        (pattern
          (identifier))
        (array_access
          (identifier)
          (identifier))))))

========================================================================
variable definition with mixed literal array access
========================================================================

func cursed(i int) Goblin {
  goblin = goblins[13][i];
}

------------------------------------------------------------------------

(source_file
  (function_definition
    (func_header
      (identifier)
      (parameters
        (parameter
          (identifier)
          (type
            (type_identifier))))
      (type
        (type_identifier)))
    (block
      (variable_definition
        (pattern
          (identifier))
        (array_access
          (array_access
            (identifier)
            (literal
              (int_lit)))
          (identifier))))))

========================================================================
variable definition with multi array access
========================================================================

func cursed(i int) Goblin {
  goblin = goblins[13][i][1][100];
}

------------------------------------------------------------------------

(source_file
  (function_definition
    (func_header
      (identifier)
      (parameters
        (parameter
          (identifier)
          (type
            (type_identifier))))
      (type
        (type_identifier)))
    (block
      (variable_definition
        (pattern
          (identifier))
        (array_access
          (array_access
            (array_access
              (array_access
                (identifier)
                (literal
                  (int_lit)))
              (identifier))
            (literal
              (int_lit)))
          (literal
            (int_lit)))))))

========================================================================
multi array decl
========================================================================

func cursed(i [][]int) [][]Goblin {
  return transform(i);
}

------------------------------------------------------------------------

(source_file
  (function_definition
    (func_header
      (identifier)
      (parameters
        (parameter
          (identifier)
          (type
            (array_type
              (dynamic_array_type
                (type
                  (array_type
                    (dynamic_array_type
                      (type
                        (type_identifier))))))))))
      (type
        (array_type
          (dynamic_array_type
            (type
              (array_type
                (dynamic_array_type
                  (type
                    (type_identifier)))))))))
    (block
      (expr_statement
        (return_expr
          (call_expr
            (identifier)
            (identifier)))))))


========================================================================
multi array decl with construction
========================================================================

func cursed() [][]Goblin {
  goblins = [][]Goblin();
}

------------------------------------------------------------------------

(source_file
  (function_definition
    (func_header
      (identifier)
      (parameters)
      (type
        (array_type
          (dynamic_array_type
            (type
              (array_type
                (dynamic_array_type
                  (type
                    (type_identifier)))))))))
    (block
      (variable_definition
        (pattern
          (identifier))
        (call_expr
          (array_type
            (dynamic_array_type
              (type
                (array_type
                  (dynamic_array_type
                    (type
                      (type_identifier))))))))))))


========================================================================
big string with braces
========================================================================

func cursed() {
    """
    {
        still a string
    }
    """
}

------------------------------------------------------------------------

(source_file
  (function_definition
    (func_header
      (identifier)
      (parameters))
    (block
      (literal
        (string_literal
          (interpolated_raw_string_text)
          (interpolated_raw_string_text)
          (interpolated_raw_string_text))))))


========================================================================
big string with unescaped interpolation
========================================================================

func cursed() {
    """
    {\
        f()
    }
    """
}

------------------------------------------------------------------------

(source_file
  (function_definition
    (func_header
      (identifier)
      (parameters))
    (block
      (literal
        (string_literal
          (interpolated_raw_string_text)
          (interpolation
            (call_expr
              (identifier)))
          (interpolated_raw_string_text))))))


========================================================================
big string with hex escape
========================================================================

func cursed() {
    """
    sprog\u001bwoggle, sprog\nbwoggle
    """
}

------------------------------------------------------------------------

(source_file
  (function_definition
    (func_header
      (identifier)
      (parameters))
    (block
      (literal
        (string_literal
          (interpolated_raw_string_text)
          (interpolated_raw_string_text
            (escape_sequence))
          (interpolated_raw_string_text)
          (interpolated_raw_string_text
            (escape_sequence))
          (interpolated_raw_string_text))))))
